<?php defined('BASEPATH') OR exit('No direct script access allowed');
/**
 * @author    Rodrigo Colodiano Diniz <kollodiano@gmail.com>
 * @copyright AR Technologies
 * @version   1.0.0
 *|--------------------------------------------------------------------------------------------------------
 *| Data Criação: 31/10/2019 - Rodrigo Colodiano
 *|--------------------------------------------------------------------------------------------------------
 *| Controller criado para trabalhar com as requisições AJAX
 *| OBS: Este controller retorna apenas os JSON dos dados, não realiza chamada de VIEWS
 *|
 */

class Ajax_request extends CI_Controller 
{
	function __construct()
	{
		parent::__construct();
        // Configurar fuso horário
        setlocale (LC_ALL, 'pt_BR','ptb');
        date_default_timezone_set('America/Sao_Paulo');

        // Carregar MODELOS utilizados
        $this->load->model('Agenda_model');
        $this->load->model('Conferencia_model');
        $this->load->model('Nf_model');

        // Carregar BIBLIOTECAS utilizadas
        //$this->load->library('library_1');
        //$this->load->library('library_2');
	}

    public function index()
    {
        echo "FALSE";
    }

    // Obtem dados para o modal de avarias por produto
    public function modal_avarias()
    {
        $recebimento_id = $this->input->post('ajax_id');
        $dados_avarias  = $this->Conferencia_model->obtem_dados_avarias($recebimento_id);

        foreach($dados_avarias AS $d_avarias):
            $dados = 
            [
                'status'            => TRUE, 
                'id_recebimento'    => $d_avarias->rec_id,
                'id_produto'        => $d_avarias->rec_produto,
                'cod_produto'       => $d_avarias->pro_cod_pro_cli,
                'descricao_produto' => $d_avarias->rec_produto_nome,
                'total_manchado'    => $d_avarias->total_manchado,
                'total_amassado'    => $d_avarias->total_amassado,
                'total_rasgado'     => $d_avarias->total_rasgado,
                'total_quebrado'    => $d_avarias->total_quebrado,
                'total_violado'     => $d_avarias->total_violado
            ];
        endforeach;

        echo json_encode($dados);
    }

	// Obtem dados para o modal de vencidos por produto
    public function modal_vencidos()
    {
        $recebimento_id = $this->input->post('ajax_id');
        $dados_vencidos  = $this->Conferencia_model->obtem_dados_vencidos($recebimento_id);
        
        foreach($dados_vencidos AS $d_vencidos):
            $dados = 
            [
                'status'            => TRUE, 
                'id_recebimento'    => $d_vencidos->rec_id,
                'id_produto'        => $d_vencidos->rec_produto,
                'cod_produto'       => $d_vencidos->pro_cod_pro_cli,
                'descricao_produto' => $d_vencidos->rec_produto_nome,
                'data_vencimento'   => implode('/', array_reverse(explode('-', $d_vencidos->recven_data))),
                'quantidade'        => $d_vencidos->recven_quantidade,
            ];
        endforeach;

        echo json_encode($dados);
    }

    //

    public function buscar_modal_nf()
    {
        
        $cbn_num_nota = $this->input->post('ajax_nf');       
        $cbn_id                 = '';
        $cbn_tipo_operacao      = '';
        $cbn_tipo_nota          = '';
        $itn_id_pro             = '';
        $pro_descricao          = '';
        $itn_qtd_ven            = '';
        $itn_vlr_liq            = '';
        

        if(strlen($cbn_num_nota) == 44){

            $tipo_nf = "CHAVE";

        } else {

            $tipo_nf = "NUMERO";
        }

        $dados_nf = $this->Agenda_model->NotaFiscalExiste($cbn_num_nota,$tipo_nf);    
    
        echo json_encode($dados_nf);

    }


    public function buscar_recebimento_divergencia()
    {
        
        $cbn_num_nota   = $this->input->post('ajax_nf');       
        $vol_cod_barras = $this->input->post('ajax_volume');
        $form_num_ean   = $this->input->post('ajax_ean');        

        $dados_nf = $this->Nf_model->RecebimentoDivergenteExiste($cbn_num_nota,$form_num_ean); 
        
        
        echo json_encode($dados_nf);
    }

	
	 // Atualiza a quantidade do input-spinner do produto selecionado
    public function atualiza_recebimento_qtd()
    {
        $recebimento_id = $this->input->post('ajax_id');
        $qtd_produto    = $this->input->post('ajax_qtd');

        $this->Conferencia_model->atualizar_recebimento_qtd($recebimento_id, $qtd_produto);

        $dados = 
            [
                'status'            => TRUE, 
                'id_recebimento'    => $recebimento_id,
                'quantidade'        => $qtd_produto,
            ];

        echo json_encode($dados);
    }

    // Obtem os dados para o modal de controlados por produto
    public function modal_controlados()
    {
        $recebimento_id = $this->input->post('ajax_id');
        $dados_vencidos  = $this->Conferencia_model->obtem_dados_vencidos($recebimento_id);
        
        foreach($dados_vencidos AS $d_vencidos):
            $dados = 
            [
                'status'            => TRUE, 
                'id_recebimento'    => $d_vencidos->rec_id,
                'id_produto'        => $d_vencidos->rec_produto,
                'cod_produto'       => $d_vencidos->pro_cod_pro_cli,
                'descricao_produto' => $d_vencidos->rec_produto_nome,
                'data_vencimento'   => implode('/', array_reverse(explode('-', $d_vencidos->recven_data))),
                'quantidade'        => $d_vencidos->recven_quantidade,
            ];
        endforeach;

        echo json_encode($dados);
    }


}